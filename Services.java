/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package mainPackage;

import java.awt.*;
import java.awt.event.*;
import java.util.*;
import javax.swing.*;
import javax.swing.table.*;

/**
 *
 * @author ALEX
 */
public class Services extends javax.swing.JFrame {
    public DefaultTableModel m;
    DefaultListModel list = new DefaultListModel();
    public ArrayList<String> getData = new ArrayList<>();
    public ArrayList<String> getData1 = new ArrayList<>();
    public ArrayList<Integer> getDataInt = new ArrayList<>();
    /**
     * Creates new form Services
     */
    public Services() {
        initComponents();
        m = (DefaultTableModel) jTable2.getModel();
        this.setResizable(false);
        this.setTitle("SERVICES");
        JTableHeader tableHeader = jTable2.getTableHeader();
        Font HeaderFont = new Font("Felix Titling", Font.BOLD, 14);
        tableHeader.setFont(HeaderFont);
        jTable2.getColumnModel().getColumn(0).setMinWidth(0);
        jTable2.getColumnModel().getColumn(0).setMaxWidth(0);
        jTable2.getColumnModel().getColumn(0).setWidth(0);
        
        jTable2.getColumnModel().getColumn(1).setPreferredWidth(125);
        jTable2.getColumnModel().getColumn(2).setPreferredWidth(10);
        
        fillTable();
        fillInsertInfo();
    }
    
    private void fillTable() {
        getData.clear();
        m.setRowCount(0);
        getData = DB_Connection.select(
        new String[] {"ServiceID", "Service_Type", "Service_Price"}, "Services");
        
        for (int i = 0; i < getData.size(); i++) {
            String[] arr = getData.get(i).split("_");
            m.addRow(new Object[] {
                arr[0], arr[1], arr[2] + " â‚¬"
            });
        }
        
        getData.clear();  
    }
    
    private void fillInsertInfo() {
        //Service Type
        getData.clear();
        
        serviceType.setText("");
        serviceType1.setText("");
        
        //Service Price
        getData.clear();
        
        price.setText("");
        price1.setText("");
    }
    
    private void fillUpdateInfo() {
        int row = jTable2.getSelectedRow();
        
        String type = String.valueOf(m.getValueAt(row, 1));
        serviceType1.setText(type);
        
        String Price1 = String.valueOf(m.getValueAt(row, 2));
        String arr[] = Price1.split(" ");
        price1.setText(arr[0]);
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        PopUpDelete = new javax.swing.JPopupMenu();
        deleteItem = new javax.swing.JMenuItem();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        Update = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel15 = new javax.swing.JLabel();
        price = new javax.swing.JTextField();
        Insert = new javax.swing.JButton();
        price1 = new javax.swing.JTextField();
        serviceType = new javax.swing.JTextField();
        serviceType1 = new javax.swing.JTextField();
        jButton5 = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        Home = new javax.swing.JMenu();
        jMenu1 = new javax.swing.JMenu();
        search = new javax.swing.JMenuItem();
        add_delete = new javax.swing.JMenuItem();
        update_delete = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenu3 = new javax.swing.JMenu();
        jMenu4 = new javax.swing.JMenu();

        deleteItem.setText("Delete Service");
        deleteItem.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                deleteItemMousePressed(evt);
            }
        });
        PopUpDelete.add(deleteItem);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 24)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(102, 102, 0));
        jLabel3.setText("Add Service");

        jLabel4.setFont(new java.awt.Font("Lucida Sans Unicode", 1, 24)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(102, 102, 0));
        jLabel4.setText("Update Service");

        jLabel1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(153, 153, 0));
        jLabel1.setText("Service Type");

        Update.setFont(new java.awt.Font("Lucida Sans Typewriter", 0, 18)); // NOI18N
        Update.setText("Update");
        Update.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                UpdateActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(153, 153, 0));
        jLabel2.setText("Service Type");

        jLabel17.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel17.setForeground(new java.awt.Color(153, 153, 0));
        jLabel17.setText("Price");

        jTable2.setAutoCreateRowSorter(true);
        jTable2.setFont(new java.awt.Font("Felix Titling", 0, 13)); // NOI18N
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Service ID", "Type", "Price"
            }
        ));
        jTable2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jTable2MousePressed(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jTable2MouseReleased(evt);
            }
        });
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);

        jLabel15.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        jLabel15.setForeground(new java.awt.Color(153, 153, 0));
        jLabel15.setText("Price");

        price.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N

        Insert.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 18)); // NOI18N
        Insert.setText("Insert");
        Insert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InsertActionPerformed(evt);
            }
        });

        price1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N

        serviceType.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N

        serviceType1.setFont(new java.awt.Font("Lucida Sans Unicode", 0, 14)); // NOI18N

        jButton5.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        jButton5.setText("Go Back");
        jButton5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jButton5MouseReleased(evt);
            }
        });

        jMenuBar1.setFont(new java.awt.Font("Felix Titling", 0, 14)); // NOI18N

        Home.setForeground(new java.awt.Color(98, 98, 98));
        Home.setText("Main Menu");
        Home.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        Home.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                HomeMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                HomeMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                HomeMousePressed(evt);
            }
        });
        jMenuBar1.add(Home);

        jMenu1.setBorder(null);
        jMenu1.setForeground(new java.awt.Color(98, 98, 98));
        jMenu1.setText("Reservations");
        jMenu1.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        jMenu1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu1MouseExited(evt);
            }
        });

        search.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        search.setForeground(new java.awt.Color(98, 98, 98));
        search.setText("Search");
        search.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                searchMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                searchMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                searchMousePressed(evt);
            }
        });
        jMenu1.add(search);

        add_delete.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        add_delete.setForeground(new java.awt.Color(98, 98, 98));
        add_delete.setText("Add & DELETE");
        add_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                add_deleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                add_deleteMouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                add_deleteMousePressed(evt);
            }
        });
        add_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                add_deleteActionPerformed(evt);
            }
        });
        jMenu1.add(add_delete);

        update_delete.setFont(new java.awt.Font("Felix Titling", 0, 12)); // NOI18N
        update_delete.setForeground(new java.awt.Color(98, 98, 98));
        update_delete.setText("UPDATE & DELETE");
        update_delete.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                update_deleteMouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                update_deleteMouseExited(evt);
            }
        });
        update_delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                update_deleteActionPerformed(evt);
            }
        });
        jMenu1.add(update_delete);

        jMenuBar1.add(jMenu1);

        jMenu2.setForeground(new java.awt.Color(98, 98, 98));
        jMenu2.setText("Clients");
        jMenu2.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        jMenu2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu2MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu2MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu2MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu2);

        jMenu3.setForeground(new java.awt.Color(98, 98, 98));
        jMenu3.setText("Rooms");
        jMenu3.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        jMenu3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu3MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu3MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu3MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu3);

        jMenu4.setForeground(new java.awt.Color(98, 98, 98));
        jMenu4.setText("Discounts");
        jMenu4.setFont(new java.awt.Font("Felix Titling", 1, 14)); // NOI18N
        jMenu4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jMenu4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jMenu4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jMenu4MousePressed(evt);
            }
        });
        jMenuBar1.add(jMenu4);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(serviceType, javax.swing.GroupLayout.DEFAULT_SIZE, 175, Short.MAX_VALUE)
                            .addComponent(price)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jLabel3))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(54, 54, 54)
                        .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(100, 100, 100)
                        .addComponent(jLabel15)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 37, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(37, 37, 37)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(serviceType1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel4)))
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(106, 106, 106)
                                        .addComponent(jLabel17)))
                                .addContainerGap(41, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(76, 76, 76)
                                .addComponent(jLabel2)
                                .addGap(0, 79, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jLabel3)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(serviceType, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(24, 24, 24)
                        .addComponent(jLabel15)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 254, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(14, 14, 14)
                                .addComponent(jLabel4)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serviceType1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel17)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(price1, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Update, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(Insert, javax.swing.GroupLayout.PREFERRED_SIZE, 44, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(26, Short.MAX_VALUE))
        );

        setSize(new java.awt.Dimension(822, 397));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void UpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_UpdateActionPerformed
        // TODO add your handling code here:
        try {
            if(serviceType1.getText().isBlank() ||
               price1.getText().isBlank()) {

                JOptionPane.showMessageDialog(this, "Blank Spots Encountered", "Operation Not Successful", 0);
            }
            else {
                int row = jTable2.getSelectedRow();

                if(String.valueOf(m.getValueAt(jTable2.getSelectedRow(), 0)).equals("15")) {
                    JOptionPane.showMessageDialog(this, "Service Cannot Be Updated", "Operation Failure", 0);
                }
                else {
                    try {
                        double value = (double) Math.round(Double.parseDouble(price1.getText()) * 100) / 100;
                        price1.setText(String.valueOf(value));

                        String servicetype1 = serviceType1.getText();
                        String Price1 = price1.getText();
                        
                        String str = "0123456789";
                        String[] arr;
                        boolean flag = false;
                        for (int i = 0; i < str.length(); i++) {
                            arr = str.split("");
                            if(servicetype1.contains(arr[i]))
                            {
                                flag = true;
                            }
                        }
                        
                        if(flag) {
                            JOptionPane.showMessageDialog(this, "Service Type Does Not Accept Digits", "Constraint", 0);
                        }
                        else {
                            getData.clear();

                            getData = DB_Connection.selectWhere4(new String[] {"Service_Type"}, new String[]{"Service_Type"}, new String[] {servicetype1}, "Services");
                            String existingSC = "";
                            if(!getData.isEmpty()) {
                                existingSC = getData.get(0);
                            }

                            getData.clear();

                            String serviceID = String.valueOf(m.getValueAt(row, 0));

                            if (servicetype1.equals(String.valueOf(m.getValueAt(row, 1)))){
                                String[] columns1 = {"Service_Type", "Service_Price"};
                                String[] values1 = {servicetype1, Price1};

                                String[] whereColumns1 = {"ServiceID"};
                                String[] whereValues1 = {serviceID};

                                DB_Connection.updateString(columns1, values1, whereColumns1, whereValues1, "Services");

                                fillInsertInfo();
                                fillTable();

                                JOptionPane.showMessageDialog(this, "Operation Completed Successfully");
                            }
                            else if(existingSC.equals(servicetype1)) {
                                JOptionPane.showMessageDialog(this, "Repeating Service", "Constraint", 0);
                            }
                            else {
                                String[] columns1 = {"Service_Type", "Service_Price"};
                                String[] values1 = {servicetype1, Price1};

                                String[] whereColumns1 = {"ServiceID"};
                                String[] whereValues1 = {serviceID};

                                DB_Connection.updateString(columns1, values1, whereColumns1, whereValues1, "Services");

                                fillInsertInfo();
                                fillTable();

                                JOptionPane.showMessageDialog(this, "Operation Completed Successfully");
                            }
                        }
                    }
                    catch (Exception e){
                        JOptionPane.showMessageDialog(this, "Price Not In Correct Format", "Price Constraint", 0);
                    }
                }
            }
        }
        catch (Exception e) {
            JOptionPane.showMessageDialog(this, "You Need To Select a Service", "Operation Failure", 0);
        }
    }//GEN-LAST:event_UpdateActionPerformed

    private void jTable2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MousePressed
        // TODO add your handling code here:
        if(SwingUtilities.isRightMouseButton(evt)) {
            PopUpDelete.show(evt.getComponent(), evt.getX(), evt.getY());
            int row = jTable2.rowAtPoint(evt.getPoint());
            jTable2.setRowSelectionInterval(row, row);
        }
    }//GEN-LAST:event_jTable2MousePressed

    private void jTable2MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable2MouseReleased
        // TODO add your handling code here:
        try {
            fillUpdateInfo();
        }
        catch(Exception e) {
            System.out.println("Initial Click");
        }
    }//GEN-LAST:event_jTable2MouseReleased

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        // TODO add your handling code here:
        try {
            int keyCode = evt.getKeyCode();
            if(keyCode == KeyEvent.VK_DELETE && jTable2.getSelectedRow() == -1) {
                fillInsertInfo();
                fillTable();
                JOptionPane.showMessageDialog(this, "You Need To Select an Existing Service", "Operation Failure", 0);
            }

            else if(keyCode == KeyEvent.VK_DELETE && jTable2.getSelectedRow() != -1) {
                if(String.valueOf(m.getValueAt(jTable2.getSelectedRow(), 0)).equals("15")) {
                    JOptionPane.showMessageDialog(this, "Service Cannot Be Deleted", "Operation Failure", 0);
                }
                else {
                    int result = JOptionPane.showConfirmDialog(this, "Do you wish to continue?\nThis process cannot be undone.", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if(result == 0){
                        deleteService();
                        fillInsertInfo();
                        fillTable();
                        JOptionPane.showMessageDialog(this, "Service Deleted Successfully", "Operation Success", 1);
                    }
                }
            }
        }
        catch (Exception e) {

        }
    }//GEN-LAST:event_jTable2KeyPressed

    private void InsertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InsertActionPerformed
        // TODO add your handling code here:
        if(serviceType.getText().isBlank() ||
           price.getText().isBlank()) {

            JOptionPane.showMessageDialog(this, "Blank Spots Encountered", "Operation Not Successful", 0);
        }

        else {
            try {
                double value = (double) Math.round(Double.parseDouble(price.getText()) * 100) / 100;
                price.setText(String.valueOf(value));

                String servicetype = serviceType.getText();
                String Price = price.getText();
                
                String str = "0123456789";
                String[] arr;
                boolean flag = false;
                for (int i = 0; i < str.length(); i++) {
                    arr = str.split("");
                    if(servicetype.contains(arr[i]))
                    {
                        flag = true;
                    }
                }
                        
                if(flag) {
                    JOptionPane.showMessageDialog(this, "Service Type Does Not Accept Digits", "Constraint", 0);
                }
                else {
                    getData.clear();

                    getData = DB_Connection.selectWhere4(new String[] {"Service_Type"}, new String[]{"Service_Type"}, new String[] {servicetype}, "Services");
                    String existingSC = "";
                    if(!getData.isEmpty()) {
                        existingSC = getData.get(0);
                    }

                    getData.clear();

                    if(existingSC.equals(servicetype)) {
                        JOptionPane.showMessageDialog(this, "Repeating Service", "Constraint", 0);
                    }
                    else {
                        String[] columns1 = {"Service_Type", "Service_Price"};
                        String[] values1 = {servicetype, Price};

                        DB_Connection.insert2(columns1, values1, "Services");

                        fillInsertInfo();
                        fillTable();
                        JOptionPane.showMessageDialog(this, "Operation Completed Successfully");
                    }
                } 
            }
            catch (Exception e){
                JOptionPane.showMessageDialog(this, "Price Not In Correct Format", "Price Constraint", 0);
            }
        }
    }//GEN-LAST:event_InsertActionPerformed

    private void deleteItemMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_deleteItemMousePressed
        // TODO add your handling code here:
        try {
            if(jTable2.getSelectedRow() == -1) {
                fillInsertInfo();
                fillTable();
                JOptionPane.showMessageDialog(this, "You Need To Select an Existing Service", "Operation Failure", 0);
            }
            if(jTable2.getSelectedRow() != -1) {
                if(String.valueOf(m.getValueAt(jTable2.getSelectedRow(), 0)).equals("15")) {
                    JOptionPane.showMessageDialog(this, "Service Cannot Be Deleted", "Operation Failure", 0);
                }
                else {
                    int result = JOptionPane.showConfirmDialog(this, "Do you wish to continue?\nThis process cannot be undone.", "Delete Confirmation", JOptionPane.YES_NO_OPTION);
                    if(result == 0){
                        deleteService();
                        fillInsertInfo();
                        fillTable();
                        JOptionPane.showMessageDialog(this, "Service Deleted Successfully", "Operation Success", 1);
                    }
                }
            }
        }
        catch (Exception e) {

        }
    }//GEN-LAST:event_deleteItemMousePressed

    private void add_deleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_deleteMouseEntered
        // TODO add your handling code here:
        add_delete.setForeground(new Color(172, 165, 31));
    }//GEN-LAST:event_add_deleteMouseEntered

    private void add_deleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_deleteMouseExited
        // TODO add your handling code here:
        add_delete.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_add_deleteMouseExited

    private void add_deleteMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_add_deleteMousePressed
        // TODO add your handling code here:
        this.dispose();
        new Reservations_Add_Delete().setVisible(true);
    }//GEN-LAST:event_add_deleteMousePressed

    private void add_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_add_deleteActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Reservations_Add_Delete().setVisible(true);
    }//GEN-LAST:event_add_deleteActionPerformed

    private void searchMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseEntered
        // TODO add your handling code here:
        search.setForeground(new Color(172, 165, 31));
    }//GEN-LAST:event_searchMouseEntered

    private void searchMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMouseExited
        // TODO add your handling code here:
        search.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_searchMouseExited

    private void searchMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_searchMousePressed
        // TODO add your handling code here:
        Reservations_Search Search = new Reservations_Search();
        this.dispose();
        Search.setVisible(true);
    }//GEN-LAST:event_searchMousePressed

    private void update_deleteMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_deleteMouseEntered
        // TODO add your handling code here:
        update_delete.setForeground(new Color(172, 165, 31));
    }//GEN-LAST:event_update_deleteMouseEntered

    private void update_deleteMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_update_deleteMouseExited
        // TODO add your handling code here:
        update_delete.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_update_deleteMouseExited

    private void update_deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_update_deleteActionPerformed
        // TODO add your handling code here:
        this.dispose();
        new Reservations_Update_Delete().setVisible(true);
    }//GEN-LAST:event_update_deleteActionPerformed

    private void jMenu1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseEntered
        // TODO add your handling code here:
        jMenu1.setForeground(new Color(172, 165, 31));

        Home.setForeground(new Color(98, 98, 98));
        jMenu2.setForeground(new Color(98, 98, 98));
        jMenu3.setForeground(new Color(98, 98, 98));
        jMenu4.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_jMenu1MouseEntered

    private void jMenu1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu1MouseExited
        // TODO add your handling code here:
        if(!jMenu1.isSelected()) {
            jMenu1.setForeground(new Color(98, 98, 98));
        }
    }//GEN-LAST:event_jMenu1MouseExited

    private void jMenu2MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseEntered
        // TODO add your handling code here:
        jMenu2.setForeground(new Color(172, 165, 31));

        Home.setForeground(new Color(98, 98, 98));
        jMenu1.setForeground(new Color(98, 98, 98));
        jMenu3.setForeground(new Color(98, 98, 98));
        jMenu4.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_jMenu2MouseEntered

    private void jMenu2MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MouseExited
        // TODO add your handling code here:
        if(!jMenu2.isSelected()) {
            jMenu2.setForeground(new Color(98, 98, 98));
        }
    }//GEN-LAST:event_jMenu2MouseExited

    private void jMenu2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu2MousePressed
        // TODO add your handling code here:
        this.dispose();
        new Clients_Add_Update_Delete().setVisible(true);
    }//GEN-LAST:event_jMenu2MousePressed

    private void jMenu3MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseEntered
        // TODO add your handling code here:
        jMenu3.setForeground(new Color(172, 165, 31));

        Home.setForeground(new Color(98, 98, 98));
        jMenu1.setForeground(new Color(98, 98, 98));
        jMenu2.setForeground(new Color(98, 98, 98));
        jMenu4.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_jMenu3MouseEntered

    private void jMenu3MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MouseExited
        // TODO add your handling code here:
        if(!jMenu3.isSelected()) {
            jMenu3.setForeground(new Color(98, 98, 98));
        }
    }//GEN-LAST:event_jMenu3MouseExited

    private void jMenu3MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu3MousePressed
        // TODO add your handling code here:
        this.dispose();
        new Rooms().setVisible(true);
    }//GEN-LAST:event_jMenu3MousePressed

    private void jMenu4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseEntered
        // TODO add your handling code here:
        jMenu4.setForeground(new Color(172, 165, 31));

        Home.setForeground(new Color(98, 98, 98));
        jMenu1.setForeground(new Color(98, 98, 98));
        jMenu2.setForeground(new Color(98, 98, 98));
        jMenu3.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_jMenu4MouseEntered

    private void jMenu4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MouseExited
        // TODO add your handling code here:
        if(!jMenu4.isSelected()) {
            jMenu4.setForeground(new Color(98, 98, 98));
        }
    }//GEN-LAST:event_jMenu4MouseExited

    private void jMenu4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jMenu4MousePressed
        // TODO add your handling code here:
        this.dispose();
        new Discounts().setVisible(true);
    }//GEN-LAST:event_jMenu4MousePressed

    private void HomeMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeMouseEntered
        // TODO add your handling code here:
        Home.setForeground(new Color(172, 165, 31));
        
        jMenu1.setForeground(new Color(98, 98, 98));
        jMenu2.setForeground(new Color(98, 98, 98));
        jMenu3.setForeground(new Color(98, 98, 98));
        jMenu4.setForeground(new Color(98, 98, 98));
    }//GEN-LAST:event_HomeMouseEntered

    private void HomeMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeMouseExited
        // TODO add your handling code here:
        if(!Home.isSelected()) {
            Home.setForeground(new Color(98, 98, 98));
        }
    }//GEN-LAST:event_HomeMouseExited

    private void HomeMousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_HomeMousePressed
        // TODO add your handling code here:
        Main_Menu Menu = new Main_Menu();
        this.dispose();
        Menu.setVisible(true);
    }//GEN-LAST:event_HomeMousePressed

    private void jButton5MouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jButton5MouseReleased
        // TODO add your handling code here:
        Main_Menu Menu = new Main_Menu();
        this.dispose();
        Menu.setVisible(true);
    }//GEN-LAST:event_jButton5MouseReleased

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        // TODO add your handling code here:
        int result = JOptionPane.showConfirmDialog(this, "Do you wish to continue?", "Exit", JOptionPane.YES_NO_OPTION);
        if(result == 0){
            this.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        }
        else {
            this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
        }
    }//GEN-LAST:event_formWindowClosing

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_formWindowClosed
    
    private void deleteService() {
        int row = jTable2.getSelectedRow();
        String serviceID = String.valueOf(m.getValueAt(row, 0));

        //Reservations Deletion
        getData.clear();

        //Get Reservations ID
        String[] columns1 = {"Reservation_ID"};
        String[] whereColumns1 = {"ServiceID"};
        String[] whereValues1 = {serviceID};
        String table1 = "Services_Reservations";
        getData = DB_Connection.selectWhere3(columns1, whereColumns1, whereValues1, table1);

        for (int i = 0; i < getData.size(); i++) {
            String resID = getData.get(i);

            //Update Reservations by DiscountID
            String[] columns2 = {"ServiceID"};
            String[] values2 = {"15"};
            String[] whereColumns2 = {"Reservation_ID", "ServiceID"};
            String[] whereValues2 = {resID, serviceID};
            String table2 = "Services_Reservations";
            DB_Connection.updateString(columns2, values2, whereColumns2, whereValues2, table2);
        }

        getData.clear();

        //Service Deletion
        String[] whereColumns3 = {"ServiceID"};
        String[] whereValues3 = {serviceID};
        String table3 = "Services";
        DB_Connection.delete(whereColumns3, whereValues3, table3);

        getData.clear();
        getData1.clear();
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Services.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Services().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu Home;
    private javax.swing.JButton Insert;
    private javax.swing.JPopupMenu PopUpDelete;
    private javax.swing.JButton Update;
    private javax.swing.JMenuItem add_delete;
    private javax.swing.JMenuItem deleteItem;
    private javax.swing.JButton jButton5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable2;
    private javax.swing.JTextField price;
    private javax.swing.JTextField price1;
    private javax.swing.JMenuItem search;
    private javax.swing.JTextField serviceType;
    private javax.swing.JTextField serviceType1;
    private javax.swing.JMenuItem update_delete;
    // End of variables declaration//GEN-END:variables
}
